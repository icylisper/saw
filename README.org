A Clojure AWS library that provides

  - Authentication using various Credential Providers
  - Authentication using MFA, optionally
  - Assume Roles https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html


* Installation

#+BEGIN_SRC clojure

{:deps
 {omnyway-labs/saw
  {:git/url "https://github.com/omnyway-labs/saw.git"
   :sha "3d0c7a77367185817fe02fae287366e616802205"
   :tag "0.2.1"}}

(require '[saw.core :as saw])

#+END_SRC

* Basic Providers

#+BEGIN_SRC clojure
(saw/login provider)
#+END_SRC

Examples:

#+BEGIN_SRC clojure
(saw/login {:provider :static
            :region "us-east-1"
            :access-key "xxx"
            :secret-key "xxx"})

(saw/login {:provider :profile
            :profile :humans
            :region "us-east-1"})

(saw/login {:provider :env
            :region "us-east-1"})

(saw/login {:provider :default
            :region "us-east-1"})
#+END_SRC

* Provider with MFA

#+BEGIN_SRC clojure
(saw/login provider mfa-code mfa-role)

;; or set the AWS_MFA_ARN in an env variable
export AWS_MFA_ARN=arn:aws:iam::xxx:mfa/icy
(saw/login provider mfa-code)

#+END_SRC

When MFA is used to create a session, the same session can be used to
assume multiple Roles. The session is persisted in =~/.aws/session= file

#+END_SRC
* Assume Role

With the above CredentialsProvider object, created using with or
without MFA, it is possible to assume a different relevant IAM role

#+BEGIN_SRC clojure
(-> (saw/login provider)
    (saw/assume profile))

;;example:

(-> (saw/login {:provider :profile :profile :humans :region "us-east-1"})
    (saw/assume profile))

#+END_SRC

where profile is an entry in =~/.aws/credentials= file

#+BEGIN_SRC conf

[humans]
aws_access_key_id=xxx
aws_secret_access_key=xxx
region=us-east-1
[staging]
role_arn=arn:aws:iam::xxx:role/StagingUserRole
region=us-east-1
source_profile=mfa
#+END_SRC

Assume Role works with MFA too:

#+BEGIN_SRC clojure
(-> (saw/login provider mfa-code)
    (saw/assume :my-profile))
#+END_SRC

We can also pass in the role-arn and region without needing it to be
in a profile in ~/.aws/credentials

#+BEGIN_SRC clojure
(-> (saw/login provider)
    (saw/assume "arn:aws:iam::xxx:role/StagingUserRole" "us-east-1"))

;;=> creds
#+END_SRC

* Using with an AWS service client

=login= returns the CredentialsProvider object that can be used to
create the AWS service clients. Example:

#+BEGIN_SRC clojure

(import '[com.amazonaws.services.s3
          AmazonS3ClientBuilder])

(let [creds (saw/login provider)
      client (-> (AmazonS3ClientBuilder/standard)
                 (.withCredentials creds)
                 (.withRegion (saw/region))
                 .build)])

;; or when using assume

(let [creds (-> (saw/login provider) (saw/assume profile)]
      (-> (AmazonS3ClientBuilder/standard)
          (.withCredentials creds)
          (.withRegion (saw/region))
          .build)

#+END_SRC

=(.withCredentials (saw/creds))= works too.

=(saw/region)= returns the current region set during =login= or =assume=

* Session Utils

#+BEGIN_SRC clojure
;; to lookup session
(saw/session)

;; to validate the session
(saw/validate-session region)
(saw/validate-session "us-east-1")
#+END_SRC

The Session Timeout is configurable via the AWS_SESSION_TIMEOUT env
variable (seconds).

* License - Apache 2.0

Copyright 2020 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
