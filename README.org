
A Clojure library that provides

  - Authentication using various Credential Providers
  - Authentication using https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html
  - Authentication using MFA, optionally

* Installation

#+BEGIN_SRC clojure

{:deps
 {omnyway-labs/saw
  {:git/url "https://github.com/omnyway-labs/saw.git",
   :sha "88102653f45f5692a337666db648083b7fa1546c"}}

(require '[saw.core :as saw])
#+END_SRC

=saw= provides a single API function =login= that captures all form of Authentication.

* Basic Authentication
** Static Provider

#+BEGIN_SRC clojure
(saw/login {:provider :static
            :access-key "xxx"
            :secret-key "xxx"})
#+END_SRC

** Default Provider

#+BEGIN_SRC clojure
(saw/login {:provider :default
            :region   "us-east-1"}
#+END_SRC

** Profile Provider

#+BEGIN_SRC clojure
(saw/login {:provider :profile
            :profile (System/getenv "AWS_PROFILE")}
#+END_SRC

** Environment Provider

#+BEGIN_SRC clojure
(saw/login {:provider :environment}
;; reads the aws-access-key and aws-secret-key
#+END_SRC

** Using the Credentials in Client Builders

#+BEGIN_SRC clojure
(import '[com.amazonaws.services.s3 AmazonS3ClientBuilder])

(let [client (-> (AmazonS3ClientBuilder/standard)
                 (.withCredentials (saw/creds))
                 (.withRegion region)
                 .build)]
  (.method client args))

#+END_SRC

* Authentication using AssumeRole

There might be a need to use different roles for different
environments (staging, perf, production etc).

Add role per environment or section in ~/.aws/credentials
#+BEGIN_SRC clojure
[staging]
role_arn=arn:aws:iam::xxx:role/MyUserRole
region=us-east-1

[prod]
role_arn=arn:aws:iam:xxx:role/MyUserRole
#+END_SRC

#+BEGIN_SRC clojure
(saw/login env-id)
(saw/login :staging)

#+END_SRC

* Authentication using MFA

Set the following Environment variables

#+BEGIN_SRC sh
export AWS_MFA_ARN="arn:aws:iam::ACCOUNT-ID:mfa/<username>"
#+END_SRC

#+BEGIN_SRC clojure

(saw/login provider role mfa-code)
(saw/login {:provider :profile
            :profile (System/getenv "AWS_PROFILE")
            :regiion "us-east-1"}
           "arn:aws:iam::ACCOUNT-ID:role/ROLE-NAME"
           mfa-code)
=> {:provider :static
    :access-key "xx"
    :secret-key "xx"
    :session-token "token"
    :expiration #inst "xxx"}
#+END_SRC

The above returns static provider access keys with a session-token
valid for the duration set for the (Assume) Role. It also persists the
session in $HOME/.aws/session file.
When the mfa-code, session-name and role is provided, the same session
can be used to assume multiple Roles.

* Session


#+BEGIN_SRC clojure

;; to lookup session
(saw/session)

;; to validate the session
(saw/validate-session region)
(saw/validate-session "us-east-1")
#+END_SRC

The Session Timeout is configurable via the AWS_SESSION_TIMEOUT env
variable (seconds).


Sometimes it is useful to just use the persisted session if MFA is
enabled (the required ENV variables AWS_ASSUME_ROLE_ARN adn
AWS_MFA_ARN are set).
#+BEGIN_SRC clojure
(saw/login {:provider :profile :profile :foo :session? true})
#+END_SRC

In the above, if =:session?= is true, then login tries to use the
persisted session else falls back to the given provider. This is
useful for testing locally but still use profiles where MFA is not
enabled.

* License - Apache 2.0

Copyright 2020 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
